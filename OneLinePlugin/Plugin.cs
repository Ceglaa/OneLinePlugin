using System; using System.Collections.Generic; using MEC; using Server = Exiled.Events.Handlers.Server; using Exiled.API.Features; using Exiled.API.Enums; using Exiled.API.Interfaces; using Exiled.Events.EventArgs; namespace OneLinePlugin { public class Plugin : Plugin<Config> { public static Plugin Singleton; private Handler handler;  public override string Name { get; } = "OneLinePlugin"; public override string Author { get; } = "Cegla"; public override string Prefix { get; } = "OneLinePlugin"; public override Version Version { get; } = new Version(1, 0, 0); public override Version RequiredExiledVersion { get; } = new Version(3, 0, 0); public override void OnEnabled() { RegisterEvents(); Singleton = this; base.OnEnabled(); } public override void OnDisabled() { UnregisterEvents(); Singleton = null; base.OnDisabled(); } private void RegisterEvents() { handler = new Handler(); Server.RoundStarted += handler.OnRoundStarted; Server.RoundEnded += handler.OnRoundEnded; } private void UnregisterEvents() { Server.RoundStarted -= handler.OnRoundStarted; Server.RoundEnded -= handler.OnRoundEnded; handler = null; } } internal sealed class Handler { public void OnRoundStarted() { Timing.RunCoroutine(BroadcastLoop()); Map.Broadcast(Plugin.Singleton.Config.BroadcastTime, Plugin.Singleton.Config.RoundStartBroadcast); } public IEnumerator<float> BroadcastLoop() { while (true) { Timing.CallDelayed(120f, () => Map.Broadcast(Plugin.Singleton.Config.RepeatedBroadcastTime, Plugin.Singleton.Config.RepeatedBroadcast)); yield return Timing.WaitForSeconds(Plugin.Singleton.Config.Delay); } } public void OnRoundEnded(RoundEndedEventArgs ev) { Map.Broadcast(Plugin.Singleton.Config.BroadcastTime, Plugin.Singleton.Config.RoundEndedBroadcast); } } public sealed class Config : IConfig { public bool IsEnabled { get; set; } = true; public string RoundStartBroadcast { get; private set; } = "This is one line Plugin ^^"; public string RoundEndedBroadcast { get; private set; } = "Round has ended"; public ushort BroadcastTime { get; private set; } = 10; public string RepeatedBroadcast { get; private set; } = "Amogus"; public ushort RepeatedBroadcastTime { get; private set; } = 20; public float Delay { get; private set; } = 120; } }